# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from jetstream.core.proto import multi_lora_decoding_pb2 as multi__lora__decoding__pb2


class v1Stub(object):
  """Missing associated documentation comment in .proto file."""

  def __init__(self, channel):
    """Constructor.

    Args:
        channel: A grpc.Channel.
    """
    self.models = channel.unary_unary(
        "/v1/models",
        request_serializer=multi__lora__decoding__pb2.ListAdaptersRequest.SerializeToString,
        response_deserializer=multi__lora__decoding__pb2.ListAdaptersResponse.FromString,
    )
    self.load_lora_adapter = channel.unary_unary(
        "/v1/load_lora_adapter",
        request_serializer=multi__lora__decoding__pb2.LoadAdapterRequest.SerializeToString,
        response_deserializer=multi__lora__decoding__pb2.LoadAdapterResponse.FromString,
    )
    self.unload_lora_adapter = channel.unary_unary(
        "/v1/unload_lora_adapter",
        request_serializer=multi__lora__decoding__pb2.UnloadAdapterRequest.SerializeToString,
        response_deserializer=multi__lora__decoding__pb2.UnloadAdapterResponse.FromString,
    )


class v1Servicer(object):
  """Missing associated documentation comment in .proto file."""

  def models(self, request, context):
    """Lists all the currently loaded LoRA adapters"""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details("Method not implemented!")
    raise NotImplementedError("Method not implemented!")

  def load_lora_adapter(self, request, context):
    """Loads a new LoRA adapter."""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details("Method not implemented!")
    raise NotImplementedError("Method not implemented!")

  def unload_lora_adapter(self, request, context):
    """Unloads a LoRA adapter"""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details("Method not implemented!")
    raise NotImplementedError("Method not implemented!")


def add_v1Servicer_to_server(servicer, server):
  rpc_method_handlers = {
      "models": grpc.unary_unary_rpc_method_handler(
          servicer.models,
          request_deserializer=multi__lora__decoding__pb2.ListAdaptersRequest.FromString,
          response_serializer=multi__lora__decoding__pb2.ListAdaptersResponse.SerializeToString,
      ),
      "load_lora_adapter": grpc.unary_unary_rpc_method_handler(
          servicer.load_lora_adapter,
          request_deserializer=multi__lora__decoding__pb2.LoadAdapterRequest.FromString,
          response_serializer=multi__lora__decoding__pb2.LoadAdapterResponse.SerializeToString,
      ),
      "unload_lora_adapter": grpc.unary_unary_rpc_method_handler(
          servicer.unload_lora_adapter,
          request_deserializer=multi__lora__decoding__pb2.UnloadAdapterRequest.FromString,
          response_serializer=multi__lora__decoding__pb2.UnloadAdapterResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      "v1", rpc_method_handlers
  )
  server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class v1(object):
  """Missing associated documentation comment in .proto file."""

  @staticmethod
  def models(
      request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      insecure=False,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None,
  ):
    return grpc.experimental.unary_unary(
        request,
        target,
        "/v1/models",
        multi__lora__decoding__pb2.ListAdaptersRequest.SerializeToString,
        multi__lora__decoding__pb2.ListAdaptersResponse.FromString,
        options,
        channel_credentials,
        insecure,
        call_credentials,
        compression,
        wait_for_ready,
        timeout,
        metadata,
    )

  @staticmethod
  def load_lora_adapter(
      request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      insecure=False,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None,
  ):
    return grpc.experimental.unary_unary(
        request,
        target,
        "/v1/load_lora_adapter",
        multi__lora__decoding__pb2.LoadAdapterRequest.SerializeToString,
        multi__lora__decoding__pb2.LoadAdapterResponse.FromString,
        options,
        channel_credentials,
        insecure,
        call_credentials,
        compression,
        wait_for_ready,
        timeout,
        metadata,
    )

  @staticmethod
  def unload_lora_adapter(
      request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      insecure=False,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None,
  ):
    return grpc.experimental.unary_unary(
        request,
        target,
        "/v1/unload_lora_adapter",
        multi__lora__decoding__pb2.UnloadAdapterRequest.SerializeToString,
        multi__lora__decoding__pb2.UnloadAdapterResponse.FromString,
        options,
        channel_credentials,
        insecure,
        call_credentials,
        compression,
        wait_for_ready,
        timeout,
        metadata,
    )
